// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserColab {
  id String @id @default(uuid()) @unique
  username String @unique
  email String?
  password String 
  lastSignIn DateTime? @db.Timestamp()
  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime? @db.Timestamp()
  isSuperAdmin Boolean @default(false)
  data Data[]
  authRefreshToken AuthRefreshToken?
}

model AuthRefreshToken {
  id String @id @default(uuid()) @unique
  refreshToken String
  expiration String?
  userColab UserColab @relation(fields: [userColabId], references: [id], onDelete: Cascade)
  userColabId String @unique
  createdAt DateTime @default(now()) @db.Timestamp() 
}

model Data {
  id Int @id @default(autoincrement()) @unique
  emailSource String @unique
  emailSourcePsw String
  xUser String @unique
  xPsw String
  userColab UserColab @relation(fields: [userColabId], references: [id], onDelete: Cascade)
  userColabId String
  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime? @db.Timestamp()
  apiData ApiData?
  apiKeys ApiKeys?
}

model ApiData {
  id Int @id @default(autoincrement()) @unique
  appName String
  appId String
  data Data @relation(fields: [dataId], references: [id], onDelete: Cascade)
  dataId Int @unique
  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime? @db.Timestamp()
  apiKeys ApiKeys?
}

model ApiKeys {
  id Int @id @default(autoincrement()) @unique
  apiKey String @unique
  apiKeySecret String @unique
  bearerToken String @unique
  accessToken String @unique
  accessTokenSecret String @unique
  apiData ApiData @relation(fields: [apiDataId], references: [id], onDelete: Cascade)
  apiDataId Int @unique
  data Data @relation(fields: [dataId], references: [id], onDelete: Cascade)
  dataId Int @unique
  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime? @db.Timestamp()
}